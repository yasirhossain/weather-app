{"version":3,"file":"0.6646956f80b2149dbcda.hot-update.js","sources":["../../src/client/modules/weather/containers/weather.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { graphql, compose } from 'react-apollo';\nimport update from 'immutability-helper';\nimport { Button } from 'reactstrap';\n\nimport axios from 'axios';\n\n//import WEATHER_QUERY from '../graphql/weather_get.graphql';\n\nclass Weather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.subscription = null;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.loading) {\n      this.getLocation();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription();\n    }\n  }\n\n  getLocation() {\n    const geolocation = navigator.geolocation;\n\n    new Promise((resolve, reject) => {\n      if (!geolocation) {\n        reject(new Error('Not Supported'));\n      }\n\n      geolocation.getCurrentPosition((position) => {\n        console.log(this.getWeatherForecast(position.coords.latitude, position.coords.longitude));\n        return this.getWeatherForecast(position.coords.latitude, position.coords.longitude);\n      }, () => {\n        reject (new Error('Permission denied'));\n      });\n    });\n  }\n\n  getWeatherForecast(lat, long) {\n    const API_KEY = `46ddd9c3c6a545d0d62e60754768e38d`;\n    const WEATHER_URL = `http://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${long}&appid=${API_KEY}`;\n\n    return axios.get(WEATHER_URL).then(\n      (res) => {\n        if (res.data.cod !== '200' && res.data.message){\n          throw new Error(res.data.message);\n        } else {\n          console.log(res.data);\n          return res.data;\n        }\n      },\n      (res) => {\n        throw new Error(res.data.message);\n      }\n    );\n  }\n\n  render() {\n    const { loading } = this.props;\n    return (\n      <div className=\"text-center mt-4 mb-4\">\n        ITS DAT BOI WUDDUP\n        { this.getLocation.cod }\n      </div>\n    );\n  }\n}\n\nWeather.propTypes = {};\n\nconst WeatherWithApollo = compose()(Weather);\n\nexport default connect(\n  (state) => ({  }),\n  (dispatch) => ({  }),\n)(WeatherWithApollo);\n\n\n\n// WEBPACK FOOTER //\n// src/client/modules/weather/containers/weather.jsx"],"mappings":";;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAFA;AAKA;;;;AA/DA;AACA;AAiEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;;;;A","sourceRoot":""}