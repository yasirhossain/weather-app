{"version":3,"file":"0.adf690895654b87ba4a1.hot-update.js","sources":["../../src/client/modules/weather/containers/weather.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Button } from 'reactstrap';\n\nimport momentjs from 'moment';\nimport Moment from 'react-moment';\n\nimport axios from 'axios';\n\nexport default class Weather extends React.Component {\n  constructor(props) {\n    super(props);\n    this.API_KEY = `46ddd9c3c6a545d0d62e60754768e38d`;\n    this.onCityEnter = this.onCityEnter.bind(this);\n    this.state = {\n      metric: 'imperial',\n      lat: 0,\n      lon: 0,\n      currentData: {\n        city: {\n          name: '',\n          country: ''\n        },\n        main: {\n          temp: '',\n          temp_max: '',\n          temp_min: ''\n        },\n        weather: [\n          {\n            description: '',\n            main: ''\n          }\n        ]\n      },\n      weatherData: {\n        city: {\n          name: '',\n          country: ''\n        },\n        list: []\n      },\n      forecastData: []\n    };\n  }\n\n  componentWillMount() {\n    this.getLocation();\n  }\n\n  getLocation() {\n    if (navigator) {\n      const geolocation = navigator.geolocation;\n\n      new Promise((resolve, reject) => {\n        geolocation.getCurrentPosition((position) => {\n          this.setState({\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          });\n          this.getWeatherForecast(this.state.lat, this.state.lon, this.state.metric);\n        }, () => {\n          reject (new Error('Permission denied'));\n        });\n      });\n    } else {\n      console.log(`sorry but this didnt work`);\n    }\n  }\n\n  getCityData(city) {\n    const WEATHER_CITY_URL = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this.API_KEY}&units=${this.state.metric}`;\n    axios.get(WEATHER_CITY_URL).then(\n      (res) => {\n        if (res.data.cod !== '200' && res.data.message){\n          throw new Error(res.data.message);\n        } else {\n          this.setState({\n            lat: res.data.coord.lat,\n            lon: res.data.coord.lon\n          });\n          this.getWeatherForecast(res.data.coord.lat, res.data.coord.lon, this.state.metric);\n          return res.data;\n        }\n      },\n      (res) => {\n        throw new Error(res.data.message);\n      }\n    );\n  }\n\n  getCurrentWeather(lat, long) {\n    const WEATHER_CURRENT_URL = `http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${this.API_KEY}&units=${this.state.metric}`;\n    axios.get(WEATHER_CURRENT_URL).then(\n      (res) => {\n        if (res.data.cod !== '200' && res.data.message){\n          throw new Error(res.data.message);\n        } else {\n          this.setState({\n            currentData: res.data,\n          });\n          return res.data;\n        }\n      },\n      (res) => {\n        throw new Error(res.data.message);\n      }\n    );\n  }\n\n  renderCurrentWeather() {\n    return (\n      <div>\n        <h2><i className=\"fa fa-cloud\"></i> Today's Forecast</h2>\n        <ul className=\"current-day list-unstyled\">\n          <li className=\"card\">\n            <div className=\"container\" style={mainCardStyle}>\n              <label className=\"title\">{ momentjs.unix(this.state.currentData.dt).format('ddd') }</label>\n              <label className=\"number\">{ Math.round(this.state.currentData.main.temp) }</label>\n              <label>{ this.state.currentData.weather[0].main }</label>\n              <label>\n                <i className=\"fa fa-chevron-up\"></i> { Math.round(this.state.currentData.main.temp_max) }\n              </label>\n              <label>\n                <i className=\"fa fa-chevron-down\"></i> { Math.round(this.state.currentData.main.temp_min) }\n              </label>\n            </div>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n\n  getWeatherForecast(lat, long, metric) {\n    const WEATHER_FORECAST_URL = `http://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${long}&appid=${this.API_KEY}&units=${metric}&cnt=5`;\n\n    axios.get(WEATHER_FORECAST_URL).then(\n      (res) => {\n        if (res.data.cod !== '200' && res.data.message){\n          throw new Error(res.data.message);\n        } else {\n          let forecastData = [];\n          res.data.list.map((timeData, index) => {\n            forecastData.push(timeData);\n          });\n          this.setState({\n            weatherData: res.data,\n            forecastData: forecastData\n          });\n          return res.data;\n        }\n      },\n      (res) => {\n        throw new Error(res.data.message);\n      }\n    );\n  }\n\n  onCityEnter(event) {\n    event.preventDefault();\n    const city = this.refs.city.value;\n\n    this.getCityData(city);\n\n    this.refs.city.value = '';\n  }\n\n  renderCityForm() {\n    return(\n      <div className=\"city\">\n        <h2><i className=\"fa fa-globe\"></i> Enter a City</h2>\n        <form id=\"frmChat\" role=\"form\" onSubmit={this.onCityEnter}>\n          <input type=\"city\" className=\"form-control\" id=\"txtCity\" ref=\"city\" placeholder=\"Enter a city...\" name=\"city\" />\n        </form>\n      </div>\n    )\n  }\n\n  toggleIsActive(value) {\n    return ((value===this.state.metric) ?'active':'');\n  }\n\n  toggleMetric(metric) {\n    this.setState({\n      metric: metric\n    });\n    this.getWeatherForecast(this.state.lat, this.state.lon, metric);\n  }\n\n  renderMetricToggle() {\n    const activeStyle = {\n      width: `${100 / this.state.forecastData.length}%`\n    };\n\n    return(\n      <ul className=\"list-unstyled {}\">\n        <li className={this.toggleIsActive('imperial')} onClick={() => this.toggleMetric('imperial')}>F</li>\n        <li className={this.toggleIsActive('metric')} onClick={() => this.toggleMetric('metric')}>C</li>\n      </ul>\n    )\n  }\n\n  renderWeatherForecast() {\n    const widthStyle = {\n      width: `${100 / this.state.forecastData.length}%`\n    };\n\n    return (\n      <div className=\"forecast clearfix\">\n        <h1><i className=\"fa fa-map-marker\"></i> { this.state.weatherData.city.name }</h1>\n        <h2><i className=\"fa fa-cloud\"></i> 5 Day Forecast</h2>\n        <ul className=\"day list-unstyled\">\n          {\n            this.state.forecastData.map(function(day) {\n              let dayString = momentjs.unix(day.dt).format('ddd');\n              let dayCardStyle = {\n                background: `-webkit-linear-gradient(0deg, #43cff3, #e56363 ${day.temp.day}%)`,\n                background: `linear-gradient(0deg, #43cff3, #e56363 ${day.temp.day}%)`\n              };\n              return (\n                <li key={day.dt} className=\"card\" style={widthStyle}>\n                  <div className=\"container\" style={dayCardStyle}>\n                    <label className=\"title\">{ dayString }</label>\n                    <label className=\"number\">{ Math.round(day.temp.day) }</label>\n                    <label>{ day.weather[0].main }</label>\n                    <label>\n                      <i className=\"fa fa-chevron-up\"></i> { Math.round(day.temp.max) }\n                    </label>\n                    <label>\n                      <i className=\"fa fa-chevron-down\"></i> { Math.round(day.temp.min) }\n                    </label>\n                  </div>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n\n  render() {\n    const mainCardStyle = {\n      background: `-webkit-linear-gradient(0deg, #43cff3, #e56363 ${this.state.currentData.main.temp}%)`,\n      background: `linear-gradient(0deg, #43cff3, #e56363 ${this.state.currentData.main.temp}%)`\n    };\n\n    return (\n      <div className=\"weather text-center mt-4 mb-4 container\">\n        { this.renderMetricToggle() }\n        { this.renderWeatherForecast() }\n        { this.renderCityForm() }\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/client/modules/weather/containers/weather.jsx"],"mappings":";;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAFA;AAXA;AAiBA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AA5BA;AAJA;AAkCA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AAEA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAPA;AADA;AADA;AAFA;AAmBA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAFA;AAOA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAPA;AADA;AAcA;AAvBA;AAHA;AA+BA;;;AAEA;AACA;AACA;AADA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;;;;AArPA;AACA;;;;;A","sourceRoot":""}