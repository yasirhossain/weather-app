{"version":3,"file":"0.608db10dd3c1db782464.hot-update.js","sources":["../../src/client/modules/weather/containers/weather.jsx","../.././src/client/modules/weather/graphql/weather_get.graphql"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { graphql, compose } from 'react-apollo';\nimport update from 'immutability-helper';\nimport { Button } from 'reactstrap';\n\nimport AMOUNT_QUERY from '../graphql/count_get.graphql';\nimport ADD_COUNT_MUTATION from '../graphql/count_add_mutation.graphql';\nimport COUNT_SUBSCRIPTION from '../graphql/count_subscribe.graphql';\n\nimport WEATHER_QUERY from '../graphql/weather_get.graphql';\n\nclass Weather extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.subscription = null;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.loading) {\n      if (this.subscription) {\n        this.subscription();\n        this.subscription = null;\n      }\n\n      // Subscribe or re-subscribe\n      if (!this.subscription) {\n        this.subscribeToCount();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription();\n    }\n  }\n\n  handleReduxIncrement(e) {\n    let value;\n    if (e && e.target) {\n      value = e.target.value;\n    } else {\n      value = e;\n    }\n\n    this.props.onReduxIncrement(value);\n  }\n\n  subscribeToCount() {\n    const { subscribeToMore } = this.props;\n    this.subscription = subscribeToMore({\n      document: COUNT_SUBSCRIPTION,\n      variables: {},\n      updateQuery: (prev, {subscriptionData: {data: {countUpdated: { amount }}}}) => {\n        return update(prev, {\n          count: {\n            amount: {\n              $set: amount,\n            },\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    const { loading, count, addCount, reduxCount } = this.props;\n    if (loading) {\n      return (\n        <div className=\"text-center\">\n          Loading...\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"text-center mt-4 mb-4\">\n          ITS DAT BOI WUDDUP\n        </div>\n      );\n    }\n  }\n}\n\nWeather.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  count: PropTypes.object,\n  updateCountQuery: PropTypes.func,\n  onReduxIncrement: PropTypes.func,\n  addCount: PropTypes.func.isRequired,\n  subscribeToMore: PropTypes.func.isRequired,\n  reduxCount: PropTypes.number.isRequired,\n};\n\nconst WeatherWithApollo = compose(\n  graphql(AMOUNT_QUERY, {\n    props({ data: { loading, count, subscribeToMore } }) {\n      return { loading, count, subscribeToMore };\n    }\n  }),\n  graphql(ADD_COUNT_MUTATION, {\n    props: ({ ownProps, mutate }) => ({\n      addCount(amount) {\n        return () => mutate({\n          variables: { amount },\n          updateQueries: {\n            getCount: (prev, { mutationResult }) => {\n              const newAmount = mutationResult.data.addCount.amount;\n              return update(prev, {\n                count: {\n                  amount: {\n                    $set: newAmount,\n                  },\n                },\n              });\n            },\n          },\n          optimisticResponse: {\n            __typename: 'Mutation',\n            addCount: {\n              __typename: 'Count',\n              amount: ownProps.count.amount + 1,\n            },\n          },\n        });\n      },\n    }),\n  })\n)(Weather);\n\nexport default connect(\n  (state) => ({ reduxCount: state.counter.reduxCount }),\n  (dispatch) => ({\n    onReduxIncrement(value)\n    {\n      dispatch({\n        type: 'COUNTER_INCREMENT',\n        value: Number(value)\n      });\n    }\n  }),\n)(WeatherWithApollo);\n\n\n\n// WEBPACK FOOTER //\n// src/client/modules/weather/containers/weather.jsx","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"getWeather\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":null,\"name\":{\"kind\":\"Name\",\"value\":\"weather\"},\"arguments\":[],\"directives\":[],\"selectionSet\":null}]}}],\"loc\":{\"start\":0,\"end\":33}};\n    doc.loc.source = {\"body\":\"query getWeather {\\n    weather\\n}\\n\",\"name\":\"GraphQL\"};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \nmodule.exports = doc;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/client/modules/weather/graphql/weather_get.graphql\n// module id = ./src/client/modules/weather/graphql/weather_get.graphql\n// module chunks = 0"],"mappings":";;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AADA;AAOA;AAXA;AAaA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;;;;AAtEA;AACA;AAwEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AADA;AADA;AAOA;AAVA;AAYA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAdA;AAAA;AAsBA;AAxBA;AAAA;AADA;AACA;AA6BA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAPA;AAAA;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}